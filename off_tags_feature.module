<?php
/**
 * @file
 * Code for the OFF Tags Feature feature.
 */

include_once 'off_tags_feature.features.inc';

/**
 * Implements hook_system_info_alter().
 */
function off_tags_feature_system_info_alter(&$info, $file, $type) {
  // We dynamically add field_tags to content types that implement
  // integration. We must add a corresponding line for each field
  // instance to off_tags_feature.info so that Features is aware of the instance
  // and can sucessfully revert the field_instance component back to its
  // default state.
  if ($file->name == 'off_tags_feature') {
    $entity_types = off_tags_feature_get_entity_types_with_tags();
    if (!empty($entity_types)) {
      foreach ($entity_types as $entity_type => $bundles) {
        foreach(array_keys($bundles) as $bundle) {
          $info['features']['field_instance'][] = "$entity_type-$bundle-field_tags";
        }
      }
    }
  }
}

/**
 * Implements hook_features_pipe_alter().
 */
function off_tags_feature_features_pipe_alter(&$pipe, $data, $export) {
  if (!empty($pipe['field_instance'])) {
    foreach ($pipe['field_instance'] as $delta => $value) {
      $args = explode('-', $value);
      $field_name = $args[2];
      if ($field_name == 'field_tags') {
        unset($pipe['field_instance'][$delta]);
      }
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function off_tags_feature_views_pre_view(&$view, &$display_id, &$args) {
  // Get all enabled integrations.
  $integrations = module_invoke_all('collabco_integration');
  foreach ($integrations as $integration) { 
    // Check for a matching view name and display id.
    if (isset($integration['views'][$view->name][$display_id])) { 
      $display_integration = $integration['views'][$view->name][$display_id];

      // Return nothing if the tag_filter option is set to disabled.
      if (isset($display_integration['tag_filter']['disabled']) 
        && ($display_integration['tag_filter']['disabled'] == TRUE)) {
        return;
      }
          
      // Get existing arguments for the view.
      $arguments = $view->display_handler->get_option('arguments');   

      // Set the relationship if specified in the integration.
      $relationship = 'none';
      if (isset($display_integration['tag_filter']['relationship'])) {
        $relationship = $display_integration['tag_filter']['relationship'];
      }

      // Build the tags argument filter.
      $arguments['tid']['id'] = 'tid';
      $arguments['tid']['table'] = 'taxonomy_index';
      $arguments['tid']['field'] = 'tid';
      $arguments['tid']['group_type'] = 'group';
      $arguments['tid']['relationship'] = $relationship;
      $arguments['tid']['ui_name'] = '';
      $arguments['tid']['default_action'] = 'default';
      $arguments['tid']['exception']['value'] = 'all';
      $arguments['tid']['exception']['title_enable'] = 0;
      $arguments['tid']['exception']['title'] = 'All';
      $arguments['tid']['title_enable'] =  0;
      $arguments['tid']['title'] = '';
      $arguments['tid']['breadcrumb_enable'] = 0;
      $arguments['tid']['breadcrumb'] = '';
      $arguments['tid']['default_argument_type'] = 'context';
      $arguments['tid']['default_argument_options']['namespace'] = 'off_tags_feature';
      $arguments['tid']['default_argument_options']['attribute'] = 'tag_filter';
      $arguments['tid']['default_argument_skip_url'] = 0;
      $arguments['tid']['summary_options']['base_path'] = '';
      $arguments['tid']['summary_options']['count'] = '1';
      $arguments['tid']['summary_options']['items_per_page'] = '25';
      $arguments['tid']['summary_options']['override'] = 0;
      $arguments['tid']['summary'] = 3;
      $arguments['tid']['specify_validation'] = 1;
      $arguments['tid']['validate']['type'] = 'taxonomy_term';
      $arguments['tid']['validate']['fail'] = 'ignore';
      $arguments['tid']['validate_options']['type'] = 'tids';
      $arguments['tid']['validate_options']['vocabularies'] = array();
      $arguments['tid']['validate_options']['transform'] =  0;
      $arguments['tid']['break_phrase'] =  1;
      $arguments['tid']['add_table'] =  0;
      $arguments['tid']['require_value'] =  0;
      $arguments['tid']['reduce_duplicates'] =  1;
      $arguments['tid']['set_breadcrumb'] =  0;

      $view->display_handler->override_option('arguments', $arguments);
    }
  }
}

/**
 * Returns an array of entity types with tag fields enabled via collabco integration.
 */
function off_tags_feature_get_entity_types_with_tags() {
  // Find all Commons Entity integrations.
  $integrations = module_invoke_all('collabco_integration');
  $entities = array();
  foreach ($integrations as $integration) { 
    if (empty($integration['entity']['node'])) {
      continue;
    }
    foreach ($integration['entity'] as $entity_type) {
      foreach ($entity_type as $bundle => $options) {
        // Enabled by default.
        if (!isset($options['tags']['enabled']) || ($options['tags']['enabled'] === TRUE)) {
          $entities['node'][$bundle] = $options;
        }
      }
    }
  }
  return $entities;
}

